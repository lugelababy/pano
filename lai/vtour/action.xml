<krpano>







<krpano stagescale="calc:stagescale*(0.7 + 1.0*(stagescale LT 1.0))" devices="mobile+!android" />



<krpano stagescale="calc:stagescale*(0.7 + 1.0*(stagescale LT 1.0))" devices="android" />











<layer name="thumbs" keep="true" type="container" align="leftbottom" x="0" y="-200" width="100%" height="100" bgcolor="0x40464a" bgalpha="0.4">



		<layer name="skin_thumbs" url="%SWFPATH%/plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" align="center" width="100%" height="100" direction="h" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" >



		</layer>



</layer>



<layer name="skin_thumbborder" type="container" x="0" y="0" width="118" height="80" visible="true" keep="true" enabled="false" align="leftbottom" bgborder="3 0xf7af1a 1.0" bgroundedge="5"/>











<plugin name="soundinterface" devices="all" url="plugins/soundinterface.swf" alturl="plugins/soundinterface.js" volume="1" preload="true" keep="false" />



<layer name="gyro" alturl="plugins/gyro2.js" keep="true" devices="ios" enabled="false" />









<layer name="cjxx" tooltip="场景信息" style="word_zzxx" keep="true" visible="false" align="lefttop" x="2" y="30" html=""/>





                                                                                                                                        

























                                                                                                                                                                                                                                                                                                                                                















                    







	                                        



	<style name="skin_base" url="calc:'%SWFPATH%/skin/' + skin_settings.design_skin_images" />







	<style name="vr_redian" url="spot/spot7.png" visible="false" alpha="1" scale="0.2" distortede="true" edge="center" onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );" />







	







	











	                                                                                                                                                     



	<style name="skin_glow"



	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"



	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); if(onover2, onover2() ); "



	       onout="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); ); if(onout2, onout2() );"



	       onup="if(onup2, onup2()); delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"



	       />











   











	                                                                                                              



	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="0" enabled="false" background="true" backgroundcolor="0x000000" backgroundalpha="0.5" border="false" css="color:#FFFFFF; font-family:Arial; font-weight:lighter; text-align:center; font-size:12px; word-spacing:25px;" textshadow="get:skin_settings.design_text_shadow" />







	<style name="skin_hotspotstyle" url="skin/vtourskin_hotspot.png" scale="0.25" edge="top" distorted="false"

	       tooltip=""

	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.25, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"

	       onover="tween(scale,0.3);"

	       onout="tween(scale,0.25);"

	       onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"

	       />

                                           


	<style name="skin_tooltips"



	       onover.mouse="copy(layer[skin_tooltip].html, tooltip);



	                     set(layer[skin_tooltip].visible, true);



	                     tween(layer[skin_tooltip].alpha, 1.0, 0.1);



	                     asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"



	       onout.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"



	       />



	<layer name="skin_tooltip" keep="true"



	       url="%SWFPATH%/plugins/textfield.swf"



	       parent="STAGE"



	       zorder="99"



	       visible="false" alpha="0" enabled="false"



	       align="lefttop" edge="bottom" oy="-2" autowidth="true" autoheight="true"



	       background="true" backgroundcolor="0x000000" backgroundalpha="0.6"



	       border="true" bordercolor="0xffffff" borderalpha="1.0" borderwidth="1.0" roundedge="8"  padding="3 5 3 5"



	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"



	       textshadow="get:skin_settings.design_text_shadow" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"



	       css="color:#FFFFFF; font-family:Arial; font-weight:bold;text-align:center; font-size:16px;"



	       html=""



	       />



<action name="draglayer_text">



		if(%1 != dragging,



			copy(drag_currenty, y);



			copy(drag_stagey, mouse.stagey);



			draglayer_text(dragging,%2);



		  ,



			if(pressed,



				sub(dy, mouse.stagey, drag_stagey);



				add(y1, drag_currenty, dy);



				add(y2, y1, pixelheight);



				sub(y2, %2);



				if(y1 GT 0, set(y1,0));



				if(y2 LT 0, sub(y1,y2));



				copy(y,y1);



				delayedcall(0, draglayer_text(dragging,%2) );



			  );



		  );



	</action>







<action name="draglayer">



		if(%1 != dragging,



			copy(drag_currentx, x);



			copy(drag_currenty, y);



			copy(drag_stagex, mouse.stagex);



			copy(drag_stagey, mouse.stagey);



			set(drag_sx, +1);



			set(drag_sy, +1);



			if(align == righttop,    set(drag_sx,-1); );



			if(align == right,       set(drag_sx,-1); );



			if(align == rightbottom, set(drag_sx,-1); set(drag_sy,-1); );



			if(align == bottom,      set(drag_sy,-1); );



			if(align == leftbottom,  set(drag_sy,-1); );



			draglayer(dragging);



		  ,



			if(pressed,



				sub(dx, mouse.stagex, drag_stagex);



				sub(dy, mouse.stagey, drag_stagey);



				mul(dx, drag_sx);



				mul(dy, drag_sy);



				add(x, drag_currentx, dx);



				add(y, drag_currenty, dy);



				delayedcall(0, draglayer(dragging) );



			  );



		  );



	</action>




	<action name="skin_startup">


		if(skin_settings.thumbs,



			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );



			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);



			if(skin_settings.thumbs_onhoverscrolling AND device.mouse,



				set(layer[skin_thumbs].draggable, false);



				set(layer[skin_thumbs].onhover_autoscrolling, true);



			  );



		  );




		if(skin_settings.gyro AND !device.desktop AND device.html5,



			copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);



		  );



		if(skin_settings.webvr AND device.html5 AND device.webgl,



			copy(plugin[WebVR].url, plugin[WebVR].pluginurl);



		  );



		if(skin_settings.maps == true,



			set(layer[skin_btn_map].visible, true);


			if(device.flash,



				copy(layer[skin_map].key, skin_settings.maps_bing_api_key);



				set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');



			  ,



				if(skin_settings.maps_type == 'bing',



					copy(layer[skin_map].key, skin_settings.maps_bing_api_key);



					set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js');



				  ,



					set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js');



				  );



			  );



		  );







		if(skin_settings.littleplanetintro AND (device.webgl OR device.flash),



			skin_setup_littleplanetintro();



		  );







		skin_addthumbs();



		skin_onresize();



		skin_updatescroll();







		set(layer[skin_layer].visible, true);



	</action>











	<action name="skin_addthumbs">



	copy(thumbwidth, skin_settings.thumbs_width);



	copy(thumbheight, skin_settings.thumbs_height);



	copy(thumbpadding, skin_settings.thumbs_padding);



	copy(thumbcrop, skin_settings.thumbs_crop);







	add(thumbxoffset, thumbwidth, thumbpadding);



	mul(thumbxcenter, thumbxoffset, 0.5);



	mul(thumbbarwidth, thumbxoffset, scene.count);



	add(thumbbarwidth, thumbpadding);



	add(thumbbarheight, thumbpadding, thumbheight);



	add(thumbbarheight, thumbpadding);







	if(skin_settings.thumbs_scrollindicator,



		copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);



		add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);



		);







	copy(layer[skin_thumbs].height, thumbbarheight);



	copy(layer[skin_thumbs].width, thumbbarwidth);



 



	mul(halfheight, thumbbarheight, 0.5);



	copy(layer[skin_thumbs_scrollleft].y, halfheight);



	copy(layer[skin_thumbs_scrollright].y, halfheight);







	for(set(i,0), i LT scene.count, inc(i),



		txtadd(thumbname,'skin_thumb_',get(i));



		addlayer(get(thumbname));



		copy(layer[get(thumbname)].url, scene[get(i)].thumburl);



		set(layer[get(thumbname)].keep, true);



		set(layer[get(thumbname)].parent, 'skin_thumbs');



		set(layer[get(thumbname)].align, lefttop);



		copy(layer[get(thumbname)].crop, thumbcrop);



		copy(layer[get(thumbname)].width, thumbwidth);



		copy(layer[get(thumbname)].height, thumbheight);



		mul(thumbx, i, thumbxoffset);



		add(thumbx, thumbpadding);



		copy(layer[get(thumbname)].x, thumbx);



		copy(layer[get(thumbname)].y, thumbpadding);



		add(scene[get(i)].thumbx, thumbx, thumbxcenter);



		copy(scene[get(i)].thumby, thumbpadding);



		set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );



		set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); );



		if(skin_settings.tooltips_thumbs,



			set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );



			layer[get(thumbname)].loadstyle(skin_tooltips);



			);



		if(skin_settings.thumbs_text,



			txtadd(thumbtext, 'skin_thumbtext_', get(i));



			addlayer(get(thumbtext));



			layer[get(thumbtext)].loadstyle(skin_thumbtext_style);



			set(layer[get(thumbtext)].keep, true);



			set(layer[get(thumbtext)].parent, get(thumbname));



			set(layer[get(thumbtext)].html, get(scene[get(i)].title));



			);



		);



		



	</action>











	<action name="skin_addmapspots">



		for(set(i,0), i LT scene.count, inc(i),



			if(scene[get(i)].lat,



				txtadd(spotname, 'spot', get(i));



				txtadd(spotclickevent, 'skin_hidetooltips(); activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');



				copy(scene[get(i)].mapspotname, spotname);



				addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);



				if(skin_settings.tooltips_mapspots,



					set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );



					txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover) );



					txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout)  );



				  );



			  );



		  );







		if(xml.scene != null,



			activatespot( get(scene[get(xml.scene)].mapspotname) );



		  ,



			activatespot(spot0);



		  );







		                                                               



		zoomToSpotsExtent();



	</action>











	<action name="skin_setup_littleplanetintro">



		copy(lp_scene, xml.scene);



		copy(lp_hlookat, view.hlookat);



		copy(lp_vlookat, view.vlookat);



		copy(lp_fov, view.fov);



		copy(lp_fovmax, view.fovmax);



		copy(lp_limitview, view.limitview);



		set(view.fovmax, 170);



		set(view.limitview, lookto);



		set(view.vlookatmin, 90);



		set(view.vlookatmax, 90);



		lookat(calc(lp_hlookat - 180), 90, 150, 1, 0, 0);



		set(events[lp_events].onloadcomplete,



			delayedcall(0.5,



				if(lp_scene === xml.scene,



					set(control.usercontrol, off);



					copy(view.limitview, lp_limitview);



					set(view.vlookatmin, null);



					set(view.vlookatmax, null);



					tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),



						3.0, easeOutQuad,



						set(control.usercontrol, all);



						tween(view.fovmax, get(lp_fovmax));



						);



				  );



				delayedcall(3.5,set(layer[kzt_xsl].visible,false); tween(layer[kzt_di].y,1%,0.5);); 







			  );



		  );



	</action>











	<action name="skin_onresize">



		mul(mh, area.pixelheight, -1);



		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );



		if(layer[skin_map].state    == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); add(mh,hh); add(mh,skin_settings.controlbar_overlap); sub(mh, layer[skin_scroll_layer].y_offset); copy(layer[skin_map].height, hh); );



		add(mh, layer[skin_scroll_layer].y_offset);



		set(layer[skin_scroll_layer].y, get(mh));



		skin_arrange_buttons();



	</action>











	<action name="skin_arrange_buttons">



		                                                                              







		calc(show_selbuttons, scene.count GT 1);



		calc(show_thumbutton, skin_settings.thumbs == true);



		calc(show_mapbutton,  skin_settings.maps == true);



		calc(show_gyrobutton, plugin[skin_gyro].available == true AND view.vlookatrange == 180 );



		calc(show_vrbutton,   webvr.isavailable == true);



		calc(show_fsbutton,   device.fullscreensupport == true);







		set(lpos,6);



		set(cpos,0);



		if(show_gyrobutton, dec(cpos,20));



		if(show_vrbutton, dec(cpos,24));



		set(rpos,6);







		calc(show_dirbuttons, !device.mobile AND ((area.pixelwidth + 2*cpos) GT 520));







		copy(layer[skin_btn_navi].visible,  show_dirbuttons);







		copy(layer[skin_btn_prev].visible, show_selbuttons);



		copy(layer[skin_btn_next].visible, show_selbuttons);



		if(show_selbuttons, inc(lpos,44); inc(rpos,44); );







		copy(layer[skin_btn_thumbs].visible, show_thumbutton);



		copy(layer[skin_btn_thumbs].x, lpos);



		if(show_thumbutton, inc(lpos,40));







		copy(layer[skin_btn_map].visible, show_mapbutton);



		copy(layer[skin_btn_map].x, lpos);



		if(show_mapbutton, inc(lpos,40));







		if(show_dirbuttons,



			copy(layer[skin_btn_navi].x, cpos);



			inc(cpos,140);







			set(layer[skin_btn_gyro].align, center);



			copy(layer[skin_btn_gyro].visible, show_gyrobutton);



			copy(layer[skin_btn_gyro].x, cpos);



			if(show_gyrobutton, inc(cpos,48));







			set(layer[skin_btn_vr].align, center);



			set(layer[skin_btn_vr].visible, false);



			copy(layer[skin_btn_vr].x, cpos);



			if(show_vrbutton, inc(cpos,80));



		  ,



			set(layer[skin_btn_gyro].align, left);



			copy(layer[skin_btn_gyro].visible, show_gyrobutton);



			copy(layer[skin_btn_gyro].x, lpos);



			if(show_gyrobutton, inc(lpos,40));







			set(layer[skin_btn_vr].align, left);



			copy(layer[skin_btn_vr].visible, show_vrbutton);



			copy(layer[skin_btn_vr].x, lpos);



			if(show_vrbutton, inc(lpos,80));



		  );







		copy(layer[skin_btn_hide].x, rpos);



		inc(rpos,40);







		



		copy(layer[skin_btn_fs].x, rpos);



		if(show_fsbutton, inc(rpos,40));



	</action>











	<action name="skin_updatescroll">



		if(layer[skin_thumbs].loaded,



			set(cursceneindex, 0);



			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));



			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));



		  );



	</action>











	<action name="skin_updatethumbscroll">



		copy(padding,skin_settings.thumbs_padding);







		if(skin_settings.thumbs_scrollbuttons,



			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );



			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );



		  );







		if(skin_settings.thumbs_scrollindicator,



			if(woverflow GT 0,



				set(layer[skin_thumbs_scrollindicator].visible,true);



				sub(iw,pixelwidth,woverflow);



				div(pw,iw,pixelwidth);



				div(px,loverflow,woverflow);



				mul(pw,iw);



				copy(layer[skin_thumbs_scrollindicator].width,pw);



				sub(iw,pw);



				sub(iw,padding);



				sub(iw,padding);



				mul(px,iw);



				add(px,padding);



				copy(layer[skin_thumbs_scrollindicator].x,px);



			  ,



				set(layer[skin_thumbs_scrollindicator].visible,false);



			  );



		  );



	</action>











	<action name="skin_update_scene_infos">



		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0,







			if(skin_settings.title,



				if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );



				delayedcall(0.1, set(layer[skin_title].visible,true) );



			  );







			if(skin_settings.thumbs_loop == false,



				if(scene[get(xml.scene)].index GT 0,



					set(layer[skin_btn_prev].enabled, true);



					set(layer[skin_btn_prev].alpha, 1.0);



				  ,



					set(layer[skin_btn_prev].enabled, false);



					set(layer[skin_btn_prev].alpha, 0.3);



				  );







				sub(lastsceneindex, scene.count, 1);



				if(scene[get(xml.scene)].index LT lastsceneindex,



					set(layer[skin_btn_next].enabled, true);



					set(layer[skin_btn_next].alpha, 1.0);



				  ,



					set(layer[skin_btn_next].enabled, false);



					set(layer[skin_btn_next].alpha, 0.3);



				  );



			  ,



				if(scene.count GT 1,



					set(layer[skin_btn_prev].enabled, true);



					set(layer[skin_btn_prev].alpha, 1.0);



					set(layer[skin_btn_next].enabled, true);



					set(layer[skin_btn_next].alpha, 1.0);



				  ,



					set(layer[skin_btn_prev].enabled, false);



					set(layer[skin_btn_prev].alpha, 0.3);



					set(layer[skin_btn_next].enabled, false);



					set(layer[skin_btn_next].alpha, 0.3);



				  );



			  );







			if(scene.count GT 1,



				set(layer[skin_btn_prev_fs].visible, true);



				set(layer[skin_btn_next_fs].visible, true);



			  ,



				set(layer[skin_btn_prev_fs].visible, false);



				set(layer[skin_btn_next_fs].visible, false);



			  );







			txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));



			if(layer[get(parentname)],



				set(layer[skin_thumbborder].parent, get(parentname));



				set(layer[skin_thumbborder].visible, true);



			  ,



				set(layer[skin_thumbborder].visible, false);



			  );







			if(scene[get(xml.scene)].mapspotname,



				layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));



				layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));



			  );







			if(plugin[skin_gyro].isavailable == true AND view.vlookatrange == 180,



				set(layer[skin_btn_gyro].visible, true);



			  ,



				set(layer[skin_btn_gyro].visible, false)



			  );



		  );



	</action>











	<action name="skin_gotoscene">



		if(scene[%1],



			copy(cursceneindex, scene[get(xml.scene)].index);



			copy(newsceneindex, scene[%1].index);



			txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));



			layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));



			loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)));



		  );



	</action>



	







	<action name="skin_nextscene">



		add(newsceneindex, scene[get(xml.scene)].index, %1);



		if(newsceneindex GE 0 AND newsceneindex LT scene.count,



			txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));



			layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));



			loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));



		  );



	</action>











	<action name="skin_nextscene_loop">



		add(newsceneindex, scene[get(xml.scene)].index, %1);



		sub(lastsceneindex, scene.count, 1);



		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));



		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));



		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));



		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));



	</action>











	<action name="skin_showloading">



		if(display.stereo == true,



			tween(layer[skin_loadingtext].alpha,0,0.5);



			delayedcall(0.5,set(layer[skin_loadingtext].visible, false);); 

			

		



		  ,



			if(%1 == true , set(layer[skin_loadingtext].alpha,0); set(layer[skin_loadingtext].visible,true); tween(layer[skin_loadingtext].alpha,1,0.5);



				,



				tween(layer[skin_loadingtext].alpha,0,0.5);



				delayedcall(0.5,set(layer[skin_loadingtext].visible, false);); 				

				



				);



		  );



	</action>











	<action name="skin_hidetooltips">



		set(layer[skin_tooltip].alpha,0.0);



		set(layer[skin_tooltip].visible,false);



	</action>











	<action name="skin_buttonglow">



		if('%1' !== 'null',



			set(strength,1);



			if(%2 != null, set(strength,%2));



			set(layer[skin_buttonglow].parent, %1);



			set(layer[skin_buttonglow].visible, true);



			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);



		  ,



			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,



				set(layer[skin_buttonglow].parent, null);



				set(layer[skin_buttonglow].visible, false);



			  );



		  );



	</action>











	<action name="skin_calc_opened_closed">



		set(layer[get(name)].y_opened, get(layer[get(name)].y));



		set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));



	</action>











	<action name="skin_hideskin">



		if(layer[skin_map].state    != 'closed', skin_showmap(false);    wait(0.40); );



		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );







		set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));



		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));



		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));



		tween(layer[skin_control_bar].y,     get(layer[skin_control_bar    ].y_closed), get(hidetime));







		tween(layer[skin_btn_prev_fs].x, 0, get(hidetime));



		tween(layer[skin_btn_next_fs].x, 0, get(hidetime));







		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );







		stopdelayedcall(skin_btn_show_alpha);



		set(layer[skin_btn_show].visible, true);



		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );



	</action>











	<action name="skin_showskin">



		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));



		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));



		tween(layer[skin_control_bar    ].y, get(layer[skin_control_bar    ].y_opened));







		tween(layer[skin_btn_prev_fs].x, -50);



		tween(layer[skin_btn_next_fs].x, -50);







		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );







		stopdelayedcall(skin_btn_show_alpha);



		set(layer[skin_btn_show].visible, false);



		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );



	</action>











	<action name="skin_showthumbs">



		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );



		mul(mh, layer[skin_scroll_layer].pixelheight, -1);



		if(show,



			set(layer[skin_thumbs].state, 'opened');



			tween(layer[skin_thumbs].alpha, 1.0, 0.25);



			add(mh, layer[skin_thumbs].height);



			add(mh, layer[skin_scroll_layer].y_offset);



			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);



			set(layer[skin_thumbs_container].visible, true);



			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);



			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));



		  ,



			set(layer[skin_thumbs].state, 'closed');



			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);



			add(mh, layer[skin_scroll_layer].y_offset);



			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););



		  );



	</action>











	<action name="skin_showmap">



		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );



		mul(mh, layer[skin_scroll_layer].pixelheight, -1);



		if(show,



			tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));



			set(layer[skin_map].visible, true);



			tween(layer[skin_map].alpha, 1.0, 0.25);



			set(layer[skin_map].state, 'opened');



			sub(hh,area.pixelheight,skin_settings.controlbar_offset);



			sub(hh,layer[skin_control_bar].height);



			sub(hh,32);



			add(mh,hh);



			sub(hh,skin_settings.controlbar_overlap);



			copy(layer[skin_map].height, hh);



			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);



		  ,



		  	if(layer[skin_map].state != 'closed',



				set(layer[skin_map].state, 'closed');



				add(mh, layer[skin_scroll_layer].y_offset);



				tween(layer[skin_map].alpha, 0.0, 0.5, easeOutQuint);



				tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );



			  );



		  );



	</action>











	<action name="skin_keydown_event">



		if(keycode == 33, skin_nextscene_loop(-1) );                                                  



		if(keycode == 34, skin_nextscene_loop(+1) );                                              



		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );                                  



		if(keycode == 36, skin_gotoscene(0) );                                                     



	</action>



	







	<action name="skin_deeplinking_update_url">



		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),



			copy(adr, browser.location);



			indexoftxt(qi, get(adr), '?');



			if(qi GT 0, subtxt(adr, adr, 0, get(qi)));



			copy(si, scene[get(xml.scene)].index);



			copy(h, view.hlookat);



			copy(v, view.vlookat);



			copy(f, view.fov);



			copy(d, view.distortion);



			copy(a, view.architectural);



			clamp(d, 0.0, 1.0);



			clamp(a, 0.0, 1.0);



			set(pp, calc(f LT 10 ? 6 : 2));



			roundval(h, get(pp));



			roundval(v, get(pp));



			roundval(f, get(pp));



			roundval(d, 2);



			roundval(a, 1);



			set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));



			js( history.replaceState(null, document.title, get(adr)); );



		  );



	</action>











	                     



	<contextmenu fullscreen="false" 



             enterfs="全屏"



             exitfs="退出全屏"



			 versioninfo="false"



			 native="false"



             >



		<item caption="制作：云匠科技／www.baidu.com" onclick="openurl(http://www.baidu.com);" separator="true"/>



		<item name="nv" caption="正常视角"        onclick="skin_view_normal();"        showif="view.vlookatrange == 180" separator="true" />



		<item name="lp" caption="小行星视角" onclick="skin_view_littleplanet();"  showif="view.vlookatrange == 180" devices="flash|webgl" />



	</contextmenu>











	<action name="skin_changecontrolmode">



		switch(control.mousetype, moveto, drag2d);



		switch(control.touchtype, moveto, drag2d);



	</action>







	<action name="skin_view_look_straight">



		if(view.vlookat LT -80 OR view.vlookat GT +80,



			tween(view.vlookat, 0.0, 1.0, easeInOutSine);



			tween(view.fov,     100, distance(150,0.8));



		  );



	</action>







	<action name="skin_view_normal">



		skin_view_look_straight();



		tween(view.architectural, 0.0, distance(1.0,0.5));



		tween(view.pannini,       0.0, distance(1.0,0.5));



		tween(view.distortion,    0.0, distance(1.0,0.5));



	</action>







	<action name="skin_view_fisheye">



		skin_view_look_straight();



		tween(view.architectural, 0.0,  distance(1.0,0.5));



		tween(view.pannini,       0.0,  distance(1.0,0.5));



		tween(view.distortion,    0.35, distance(1.0,0.5));



	</action>







	<action name="skin_view_architectural">



		skin_view_look_straight();



		tween(view.architectural, 1.0, distance(1.0,0.5));



		tween(view.pannini,       0.0, distance(1.0,0.5));



		tween(view.distortion,    0.0, distance(1.0,0.5));



	</action>







	<action name="skin_view_stereographic">



		skin_view_look_straight();



		tween(view.architectural, 0.0, distance(1.0,0.5));



		tween(view.pannini,       0.0, distance(1.0,0.5));



		tween(view.distortion,    1.0, distance(1.0,0.8));



	</action>







	<action name="skin_view_pannini">



		skin_view_look_straight();



		tween(view.architectural, 0.0, distance(1.0,0.5));



		tween(view.pannini,       1.0, distance(1.0,0.8));



		if(view.distortion LT 0.1,



			tween(view.distortion, 1.0, distance(1.0,0.8));



		  );



	</action>







	<action name="skin_view_littleplanet">



		tween(view.architectural, 0.0, distance(1.0,0.5));



		tween(view.pannini,       0.0, distance(1.0,0.5));



		tween(view.distortion,    1.0, distance(1.0,0.8));



		tween(view.fov,           150, distance(150,0.8));



		tween(view.vlookat,        90, distance(100,0.8));



		add(new_hlookat, view.hlookat, 123.0);



		tween(view.hlookat, get(new_hlookat), distance(100,0.8));



	</action>











<action name="add_iframe" type="Javascript">



    var iframe = document.createElement("iframe");



    iframe.style.position = "absolute";



    iframe.style.left = 0;



    iframe.id = "txmap";



    iframe.style.top = 0;



    iframe.style.width = "100%";



    iframe.style.height = "100%";



    iframe.style.border = 0;



    iframe.src = args[1];



    iframe.name="txmap";



    caller.registercontentsize(args[2], args[3]);



    caller.sprite.appendChild(iframe);



</action>











<action name="activatespot">



		                                                                    



		copy(layer[radar].x, layer[%1].x);



		copy(layer[radar].y, layer[%1].y);



		copy(layer[activespot].x, layer[%1].x);



		copy(layer[activespot].y, layer[%1].y);







		                              



		set(layer[radar].heading, %2);







		                                          



		set(layer[radar].visible, true);



		set(layer[activespot].visible, true);



</action>











                                          







<action name="size">



mul(width_map,stagewidth,0.66);



mul(height_map,stageheight,1);



</action>











                        



<events name="hengping" keep="true"  devices="mobile"



onresize="if(stagewidth GT stageheight, 



	set(layer[hxt].align,left);



	if(layer[map_di].x == 0%,set(layer[hxt].x,36%););



	set(layer[map_di].width,35%);



	set(layer[fdsx_fd].y,15%);



	set(layer[hxt].onclick,hxt_action_hengping(););



	



		,



	set(layer[hxt].align,right);



	set(layer[hxt].x,10);



	set(layer[map_di].width,85%);



	set(layer[fdsx_fd].y,10%);



	set(layer[hxt].onclick,hxt_action_mobile(););



	







	);



set(layer[map].height,get(stageheight));



mul(layer[map].width,get(bili_map),get(stageheight));



set(layer[huadong2].height,get(stageheight));



mul(layer[huadong2].width,get(bili_map),get(stageheight));



set(layer[map].x,0);



set(layer[map].y,0);







"/>







<action name="start_720yun">



mul(sum_spot,%2,2);



trace(get(sum_spot));



if(vrview == true , for(set(vrtj,0),vrtj LT 30,inc(vrtj); txtadd(vrtjname,'vrsp_spot',get(vrtj));,set(hotspot[get(vrtjname)].visible,true);););



set(layer[map].scale,1);



set(layer[map].height,get(stageheight));



mul(layer[map].width,get(bili_map),get(stageheight));



if(layer[quanping].crop == 62|0|62|62,



	set(layer[quanping].visible,false);



	set(layer[quanping_2].visible,true);



	);



txtadd(layer[cjxx].html,'您目前在：',get(scene[get(xml.scene)].title)); 



txtadd(plugin[activespot].parent,'plugin[',get(scene[get(xml.scene)].name),']');



set(plugin[activespot].visible,true);



copy(layer[radar].x, layer[get(scene[get(xml.scene)].name)].x);



copy(layer[radar].y, layer[get(scene[get(xml.scene)].name)].y);



set(layer[radar].heading, %1);



set(layer[radar].visible, true);



set(layer[activespot].visible, true);



set(layer[gbpl].onclick,



	switch(layer[gbpl].crop,62|700|62|62,0|700|62|62); 



	if(layer[gbpl].crop == 0|700|62|62,js(init(get(xml.scene))););



	for(add(l,get(sum_spot),2),l LT hotspot.count,inc(l),switch(hotspot[get(l)].visible););



	set(hotspot[webvr_prev_scene].visible,false);



	set(hotspot[webvr_next_scene].visible,false);



	set(hotspot[vr_cursor].visible,false);



	);



set(layer[quanping].onclick,



	quanping_part1();



	switch(layer[gbpl].crop,62|700|62|62,0|700|62|62); 



	if(layer[quanping].crop == 62|0|62|62 , if(layer[gbpl].crop == 62|700|62|62 , for(add(k,get(sum_spot),2),k LT hotspot.count,inc(k),set(hotspot[get(k)].visible,false););););



	if(layer[quanping].crop == 0|0|62|62 , if(layer[gbpl].crop == 0|700|62|62 , for(add(w,get(sum_spot),2),w LT hotspot.count,inc(w),set(hotspot[get(w)].visible,true););););



	set(hotspot[webvr_prev_scene].visible,false);



	set(hotspot[webvr_next_scene].visible,false);



	set(hotspot[vr_cursor].visible,false);



	);



</action>







<action name="quanping_part1">



switch(fullscreen); 



if(layer[quanping].crop == 80|0|80|80,



	set(layer[yinyue].visible,true);

	

	set(layer[xzkg].visible,true);

	

	set(layer[xzkg].visible,true);



	set(layer[skin_gyro].visible,true);



	set(layer[skin_vr].visible,true);



	set(layer[gbpl].visible,true);

	

	if(layer[cjxz].state == open,tween(layer[thumbs].y,80,0.5););



	tween(layer[yinyue].y,60,0.5);

	

	tween(layer[xzkg].y,110,0.5);

	

	tween(layer[xzkg].y,110,0.5);



	tween(layer[skin_vr].y,110,0.5);



	tween(layer[skin_gyro].y,160,0.5);



	tween(layer[gbpl].y,210,0.5);







	tween(layer[cjxz].y,27,0.7);

	

	tween(layer[icon01].y,27,0.7);

	

	tween(layer[icon02].y,27,0.7);



	tween(layer[xinxi].y,27,0.7);

	

	tween(layer[icon03].y,27,0.7);

	

	tween(layer[icon04].y,27,0.7);



	tween(layer[dianzan].y,27,0.7);



	tween(layer[pinglun].y,27,0.7);



	tween(layer[hxt].x,10,0.7);



	tween(layer[zzxx].y,5,0.5);

                                       

	,



	tween(layer[thumbs].y,-200,0.5);

                                         	

	set(layer[icon01].state,close);

	

	set(layer[icon02].state,close);



	tween(layer[yinyue].y,10,0.5);

	

	tween(layer[xzkg].y,10,0.5);



	tween(layer[skin_gyro].y,10,0.5);



	tween(layer[skin_vr].y,10,0.5);



	tween(layer[gbpl].y,10,0.5);



	set(layer[yinyue].visible,false);

	

	set(layer[xzkg].visible,false);



	set(layer[skin_gyro].visible,false);



	set(layer[skin_vr].visible,false);



	set(layer[gbpl].visible,false);







	tween(layer[cjxz].y,-50,0.7);



	tween(layer[xinxi].y,-50,0.7);

	

	tween(layer[icon01].y,-50,0.7);

	

	tween(layer[icon02].y,-50,0.7);

	

	tween(layer[icon03].y,-50,0.7);

	

	tween(layer[icon04].y,-50,0.7);



	tween(layer[dianzan].y,-50,0.7);



	tween(layer[pinglun].y,-50,0.7);



	tween(layer[hxt].x,-50,0.7);



	tween(layer[zzxx].y,-100,0.5);

                                          





	);

	

	



switch(layer[quanping].crop,80|0|80|80,0|0|80|80);







</action>



	<action name="skin_reloadscene_webvr">

		delayedcall(0.1,

			if(scene[get(xml.scene)].havevrimage,

				loadscene(get(xml.scene), null, MERGE|KEEPVIEW|KEEPMOVING|KEEPHOTSPOTS|NOPREVIEW, BLEND(0.5));

			  );

		  );

	</action>







<action name="hxt_action_desktop" device="desktop" >



switch(layer[hxt].crop,0|438|75|190,0|248|75|190);



if(layer[hxt].crop == 0|438|75|190 , 



	set(layer[map].x,0); 



	set(layer[map].y,0); 



	set(layer[skin_thumbs].align,left); 



	tween(layer[map_di].x,0%,0.5); 



	tween(layer[cjxz].x,36%,0.5); 



	tween(layer[thumbs].x,36%,0.5); 



	set(layer[zzxx].visible,false);

                                              

	,



	tween(layer[map_di].x,-120%,0.5); 



	tween(layer[cjxz].x,10,0.5);  



	tween(layer[thumbs].x,0,0.5); 



	set(layer[skin_thumbs].align,center);



	set(layer[zzxx].visible,true);

                                                 



);



</action>







<action name="hxt_action_mobile" device="mobile" >



switch(layer[hxt].crop,0|438|75|190,0|248|75|190);



if(layer[hxt].crop == 0|438|75|190 , 



	set(layer[map].x,0); 



	set(layer[map].y,0); 



	set(layer[skin_thumbs].align,left); 



	tween(layer[map_di].x,0%,0.5); 



	set(layer[cjxz].visible,false);



	set(layer[pinglun].visible,false);



	set(layer[dianzan].visible,false);



	set(layer[xinxi].visible,false);



	set(layer[zzxx].visible,false);

                                              

	,



	tween(layer[map_di].x,-120%,0.5); 



	set(layer[cjxz].visible,true); 



	set(layer[skin_thumbs].align,center);



	set(layer[pinglun].visible,true);



	set(layer[dianzan].visible,true);



	set(layer[xinxi].visible,true);



	set(layer[zzxx].visible,true);

                                             

);



</action>







<action name="hxt_action_hengping" device="mobile" >



switch(layer[hxt].crop,0|438|75|190,0|248|75|190);



if(layer[hxt].crop == 0|438|75|190 , 



	set(layer[map].x,0); 



	set(layer[map].y,0); 



	set(layer[skin_thumbs].align,left); 



	tween(layer[map_di].x,0%,0.5); 



	set(layer[cjxz].visible,false);



	set(layer[pinglun].visible,false);



	set(layer[dianzan].visible,false);



	set(layer[xinxi].visible,false);



	tween(layer[hxt].x,36%,0.5);



	set(layer[zzxx].visible,false); 

                                            

	,



	tween(layer[map_di].x,-120%,0.5); 



	set(layer[cjxz].visible,true); 



	set(layer[skin_thumbs].align,center);



	set(layer[pinglun].visible,true);



	set(layer[dianzan].visible,true);



	set(layer[xinxi].visible,true);



	tween(layer[hxt].x,10,0.5);



	set(layer[zzxx].visible,true);

                                          



);



</action>







<action name="liulanliang">



txtadd(layer[zzxx].html,'支持：篁嶺风景区 人气：',%1);



</action>







<action name="dianzan">



if(layer[dianzan].crop == 0|849|80|80,add(layer[dianzan_wz].html,1); js(liked()); , sub(layer[dianzan_wz].html,1); js(qxzan());); 



switch(crop,0|929|80|80,0|849|80|80);



js(zan());



</action>







<action name="dianzan_chushi">



if(%1 == true,set(layer[dianzan].crop,0|929|80|80),set(layer[dianzan].crop,0|849|80|80));



</action>







<action name="showdianzan">



set(layer[dianzan_wz].html,%1);



</action>







<action name="xxxrc">



for(set(i_xxxrc,0),i LT hotspot.count,inc(i_xxxrc),txtadd(rdmc,'spot',get(i_xxxrc)); set(hotspot[get(rdmc)].visible,true););



</action>







                                                          	   



<action name="add_all_the_time_tooltip">



txtadd(tooltipname, 'tooltip_', get(name));



addlayer(get(tooltipname));



txtadd(layer[get(tooltipname)].parent, 'hotspot[', get(name), ']');



set(layer[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');



set(layer[get(tooltipname)].align,top);



set(layer[get(tooltipname)].edge,bottom);



set(layer[get(tooltipname)].x,0);



set(layer[get(tooltipname)].y,10);



set(layer[get(tooltipname)].autowidth,true);



set(layer[get(tooltipname)].autoheight,true);



set(layer[get(tooltipname)].background,true);



set(layer[get(tooltipname)].padding,3 5 3 5);



set(layer[get(tooltipname)].backgroundcolor,0xf7af1a);



set(layer[get(tooltipname)].roundedge,5);



set(layer[get(tooltipname)].backgroundalpha,1);



set(layer[get(tooltipname)].border,false);



set(layer[get(tooltipname)].glow,0);



set(layer[get(tooltipname)].glowcolor,0xFFFFFF);



set(layer[get(tooltipname)].css,'color:#600CAC; font-family:黑体; font-size:12px; word-spacing:25px;');



set(layer[get(tooltipname)].textshadow,0);



set(layer[get(tooltipname)].textshadowrange,0);



set(layer[get(tooltipname)].textshadowangle,0);



copy(layer[get(tooltipname)].html,scene[get(linkedscene)].title);



set(layer[get(tooltipname)].enabled,true);



txtadd(layer[get(tooltipname)].onclick,'loadscene(',get(linkedscene),', null, MERGE, ZOOMBLEND());');



</action>







<action name="add_all_the_time_tooltip_ceshi">



txtadd(tooltipname, 'tooltip_', get(name));



addlayer(get(tooltipname));



txtadd(layer[get(tooltipname)].parent, 'hotspot[', get(name), ']');



set(layer[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');



set(layer[get(tooltipname)].align,bottom);



set(layer[get(tooltipname)].edge,top);



set(layer[get(tooltipname)].x,0);



set(layer[get(tooltipname)].y,5);



set(layer[get(tooltipname)].autowidth,true);



set(layer[get(tooltipname)].autoheight,true);



set(layer[get(tooltipname)].background,true);



set(layer[get(tooltipname)].padding,3 5 3 5);



set(layer[get(tooltipname)].backgroundcolor,0xf7af1a);



set(layer[get(tooltipname)].roundedge,5);



set(layer[get(tooltipname)].backgroundalpha,1);



set(layer[get(tooltipname)].border,false);



set(layer[get(tooltipname)].glow,0);



set(layer[get(tooltipname)].glowcolor,0xFFFFFF);



set(layer[get(tooltipname)].css,'color:#600CAC; font-family:黑体; font-size:40px; word-spacing:25px;');



set(layer[get(tooltipname)].textshadow,0);



set(layer[get(tooltipname)].textshadowrange,0);



set(layer[get(tooltipname)].textshadowangle,0);



set(layer[get(tooltipname)].html,get(name));



set(layer[get(tooltipname)].enabled,true);



</action>







                                  



<action name="add_vr_hotspot">



txtadd(vrhotspot, 'vrsp_', get(name));



addhotspot(get(vrhotspot));



set(hotspot[get(vrhotspot)].atv,get(atv));



set(hotspot[get(vrhotspot)].ath,get(ath));



set(hotspot[get(vrhotspot)].visible,false);



set(hotspot[get(vrhotspot)].alpha,1);



set(hotspot[get(vrhotspot)].distortede,true);



set(hotspot[get(vrhotspot)].edge,center);



set(hotspot[get(vrhotspot)].url,spot/spot7.png);



set(hotspot[get(vrhotspot)].scale,0.2);



txtadd(hotspot[get(vrhotspot)].onclick,'loadscene(',get(linkedscene),', null, MERGE, ZOOMBLEND());');







</action>



















                                                                                



<events name="keepall" keep="true" 



        onnewpano="skin_showloading(true); "



        onremovepano="skin_showloading(true);"



        onloadcomplete="skin_showloading(false);  



		             if(device.mobile ,set(events[keepall].onmousedown,delayedcall(0.5,



						 if(layer[map_di].x == 0% , 



						 	if(stagewidth LT stageheight ,



						 	switch(layer[hxt].crop,0|438|75|190,0|248|75|190);



							tween(layer[map_di].x,-120%,0.5); 



							set(layer[cjxz].visible,true); 

							

							set(layer[icon01].visible,true); 

							

							set(layer[icon02].visible,true); 



							set(layer[skin_thumbs].align,center);



							set(layer[pinglun].visible,true);



							set(layer[dianzan].visible,true);



							set(layer[xinxi].visible,true);

							

							set(layer[icon03].visible,true);

							

							set(layer[icon04].visible,true);



						 		);



							



							);



					 ););); 



					 if((xml.scene == startscene) AND (fullscreen == false) , 

					 

					 if(layer[cjxz].state ==open,tween(layer[thumbs].y,80,0.5););



					 tween(layer[zzxx].y,5,0.5); 



					 tween(layer[cjxz].y,27,0.5);

					 

					 tween(layer[icon01].y,27,0.5);

					 

					 tween(layer[icon02].y,27,0.5);



					 tween(layer[dianzan].y,27,0.5);



					 tween(layer[xinxi].y,27,0.5);

					 

					 tween(layer[icon03].y,27,0.5);

					 

					 tween(layer[icon04].y,27,0.5);



					 tween(layer[pinglun].y,27,0.5);

					 

					

					 tween(layer[logoleft].y,0,0.5);

					 

					 

					 



					 ); "



        onxmlcomplete="

		if(skin_settings.startat,

		txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index)); 

		set(layer[skin_thumbborder].parent, get(parentname)); 

		,

		set(skin_settings.startat,1);

		);

		

		if(layer[quanping].crop == 0|0|62|62,if(layer[gbpl].crop == 0|700|62|62,js(init(get(xml.scene)));););

"

		

		

		/>

		











<style name="word_zi" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="true" roundedge="5"  backgroundcolor="0xc50202"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:17px; word-spacing:25px;"  />







<style name="word_caidan" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="false" roundedge="5"  textshadow="1" textshadowrange="4" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1.0" backgroundcolor="0xc50202"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:12px; word-spacing:25px;"  />







<style name="word_zzxx" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="false" roundedge="5"   textshadow="1" textshadowrange="6" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1.0" backgroundcolor="0xc50202"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:16px; word-spacing:8px;"  />







<style name="word_zi_black" devices="all" x="0" y="35" url="plugins/textfield.swf" handcursor="true" selectable="false" align="center"  autowidth="true" autoheight="true" padding="3 5 3 5" background="true" roundedge="5"  backgroundcolor="0xf7af1a"  backgroundalpha="1" border="false" bordercolor="0xffffff" borderalpha="0.3" borderwidth="2.0" css="color:#600CAC; font-family:黑体; font-size:12px; word-spacing:25px;"  />











<style name="word_zi_black_shuqi" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  width="26" autoheight="true" padding="3 3 3 3" background="true" roundedge="5"  backgroundcolor="0x000000"  backgroundalpha="0.4" border="false" css="color:#ffffff; font-family:黑体; font-size:20px; word-spacing:10px;"  />







<style name="word_zi_black_heng" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="3 3 3 3" background="true" roundedge="5"  backgroundcolor="0x000000"  backgroundalpha="0.4" border="false" css="color:#ffffff; font-family:黑体; font-size:15px; word-spacing:10px;"  />







<style name="word_zi_bai" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" autowidth="true" autoheight="true" padding="2 5 2 5" background="true" roundedge="5"  backgroundcolor="0xffffff"  backgroundalpha="1" border="false" css="color:#000000; font-family:黑体; font-size:15px; word-spacing:25px;"  />







<style name="word_zi_nianfen" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" autowidth="true" autoheight="true" padding="2 10 2 10" background="true" roundedge="5"  backgroundcolor="0xda434d"  backgroundalpha="0.8" border="false" css="color:#404040; font-family:黑体; font-size:20px; word-spacing:25px;"/>







<style name="word_zi_bai_da" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" autowidth="true" autoheight="true" padding="2 5 2 5" background="true" roundedge="5"  backgroundcolor="0xffffff"  backgroundalpha="1" border="false" css="color:#000000; font-family:黑体; font-size:20px; word-spacing:25px;"  />







<style name="word_zi_bai_da_blue" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" autowidth="true" autoheight="true" padding="2 5 2 5" background="true" roundedge="5"  backgroundcolor="0x000000"  backgroundalpha="0.6" border="false" css="color:#ffffff; font-family:黑体; font-size:20px; word-spacing:25px;"  />







<style name="word_zi_hong" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" align="center"  autowidth="true" autoheight="true" padding="2 5 2 5" background="true" roundedge="5"  backgroundcolor="0x20b4f2"  backgroundalpha="1" border="false" css="color:#000000; font-family:黑体; font-size:15px; word-spacing:25px;"  />







p







<style name="word_di_shinei" scale="0.8" alpha="0.8" url="skin/heidi.png" />







<style name="word_zi_shinei" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center" y="-5" width="60" autoheight="true" background="false" border="false" css="color:#ffffff; font-family:黑体; font-size:16px;"  />







<style name="word_zi_shinei_xiao" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center" y="-5" width="60" autoheight="true" background="false" border="false" css="color:#ffffff; font-family:黑体; font-size:11px;"  />







<style name="word_ditu_black" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="true" roundedge="5"  backgroundcolor="0x000000"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:25px; word-spacing:25px;"  />











<style name="word_ditu_red" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="true" roundedge="5"  backgroundcolor="0xbd121f"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:25px; word-spacing:25px;"  />







<style name="word_zi_red" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="center"  autowidth="true" autoheight="true" padding="2 5 2 5" background="true" roundedge="5"  backgroundcolor="0xbd121f"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:10px; word-spacing:25px;"  />







<style name="word_zi_black_biaoti" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="false" roundedge="5" css="color:#ffffff; font-family:黑体; font-size:15px; word-spacing:15px;  letter-spacing: 5px; font-style:italic;"  />











<style name="word_zi_black_biaoti_da" devices="all" url="%SWFPATH%/plugins/textfield.swf" handcursor="true" selectable="false" align="center"  autowidth="true" autoheight="true" padding="5 10 5 10" background="false" roundedge="5" css="color:#ffffff; font-family:黑体; font-size:20px; word-spacing:15px;  letter-spacing: 5px; font-style:italic;"  />











 <style name="word_zi_black_biaozhu" url="%SWFPATH%/plugins/textfield.swf" handcursor="false" selectable="false" align="left" x="24" autoweight="true" autoheight="true" padding="5 10 5 10" background="true" roundedge="5"  backgroundcolor="0x000000"  backgroundalpha="0.7" border="false" css="color:#ffffff; font-family:黑体; font-size:16px; word-spacing:25px;"  />











                         



	<textstyle name="STYLE1"



	           font="Arial" fontsize.no-mobile="14" fontsize.mobile="28" bold="true" italic="true"



	           background="true" backgroundcolor="0xEEEECC"



	           border="true" bordercolor="0x777700"



	           textcolor="0x333300"



	           padding="2 4"



	           roundedge="3"



	           origin="cursor"



	           edge="bottom"



	           textalign="none"



	           xoffset="0"



	           yoffset.no-touch="-5"



	           yoffset.touch="-40"



	           />



<textstyle name="STYLE5"



	           font="Arial" fontsize="24" bold="true"



	           width="140" height="140" roundedge="70"



	           background="true" backgroundcolor="0x224466" backgroundalpha="0.667"



	           border="false"



	           textcolor="0xFFFFFF"



	           textalign="center" vcenter="true"



	           edge="center" xoffset="0" yoffset="0"



	           />



<textstyle name="STYLE4"



	           font="Arial" fontsize.no-mobile="15" fontsize.mobile="28" bold="true"



	           background="true" backgroundcolor="0x000000" backgroundalpha="0.667"



	           border="true" borderwidth="2" bordercolor="0xFFFFFF" roundedge="10"



	           textcolor="0xFFFFFF"



	           padding="6 10"



	           textalign="center"



	           yoffset.no-touch="-5"



	           yoffset.touch="-40"



	           />







                     











                                                              



	<include url="%SWFPATH%/plugins/webvr.xml" devices="html5" />







	                                                                            



	<plugin name="WebVR" keep="true" devices="html5"
          pluginurl="%SWFPATH%/plugins/webvr.js"
          url="%SWFPATH%/plugins/webvr.js"
          multireslock.desktop="true"
          multireslock.mobile.or.tablet="false"
          mobilevr_support="true"
          mobilevr_fake_support="true"
          onavailable="removelayer(webvr_enterbutton); skin_arrange_buttons(); webvr_onavailable();"
          onentervr="skin_showloading(false); webvr_onentervr(); webvr_setup(); skin_reloadscene_webvr();"
          onexitvr="webvr_onexitvr(); webvr_setup(); skin_reloadscene_webvr();"



	        />







	                                                        



	<style name="webvr_button_style"



	       border="false"



	       roundedge="calc:1.0"



	       backgroundcolor="get:skin_settings.design_bgcolor" backgroundalpha="get:skin_settings.design_bgalpha"



	       shadow="0.01" shadowrange="10.0" shadowangle="90.0" shadowcolor="0x30261B" shadowalpha="0.50"



	       css="calc:skin_settings.design_text_css + ' color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"



	       />







	                                                                                                     



	<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"



	       url="skin/rotate_device.png" scale="0.5"



	       align="top" edge="center" y="28%"



	       autoalpha="true" alpha="0.0"



	       enabled="false"



	       />







	<events name="webvr_events" keep="true" devices="html5"



	        onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"



	        onviewchange=""



	        />







	<action name="webvr_setup">



		if(webvr.isenabled,



			copy(loadscene_flags_backup, skin_settings.loadscene_flags);



			set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);



			webvr_act_as_gyro_in_portrait_mode(true);



			if(scene.count GT 1,



				set(hotspot[webvr_prev_scene].visible, true);



				set(hotspot[webvr_next_scene].visible, true);



				set(events[webvr_events].onviewchange, webvr_menu_following());



			  );



		  ,



			if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup));



			tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);



			set(hotspot[webvr_prev_scene].visible, false);



			set(hotspot[webvr_next_scene].visible, false);



			set(events[webvr_events].onviewchange, null);



		  );



	</action>







	<action name="webvr_act_as_gyro_in_portrait_mode">



		if(device.mobile AND webvr.isenabled,



			div(aspect, stagewidth, stageheight);



			if(aspect != lastaspect OR '%1' == 'true',



				copy(lastaspect, aspect);



				if(stagewidth GT stageheight,



					                                                                                        



					set(display.stereo, true);



					set(webvr.mobilevr_sensor_mode, 3);



					webvr.update();



					tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);



				  ,



					                                                                                           



					set(display.stereo, false);



					set(webvr.mobilevr_sensor_mode, 1);



					webvr.update();



					tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);



					delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );



				  );



			  );



		  ,



			set(lastaspect, 0);



		  );



	</action>







	                                    



	<style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5" />



	<hotspot name="webvr_prev_scene" keep="true" style="skin_base|webvr_menu_style" crop="0|64|64|64"  ox="-64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(-1);" visible="false" devices="html5.and.webgl" />



	<hotspot name="webvr_next_scene" keep="true" style="skin_base|webvr_menu_style" crop="64|64|64|64" ox="+64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(+1);" visible="false" devices="html5.and.webgl" />







	                                       



	<action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[



		var hs1 = krpano.get("hotspot[webvr_prev_scene]");



		var hs2 = krpano.get("hotspot[webvr_next_scene]");



		if(!hs1.hovering && !hs2.hovering)



		{



			var f = 0.01;	// following speed factor



			var h = krpano.view.hlookat;



			var v = krpano.view.vlookat;



			var hsh = hs1.ath;



			var hsv = hs1.atv;



			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;



			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;



			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;



			var dh = h - hsh;



			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0



			hsh += dh*f;



			var a = Math.abs(v - hsv) / 90.0;



			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);



			v = v + 55.0 - v*1.5;



			hsv = hsv*(1.0 - f) + v*f;



			hs1.ath = hs2.ath = hsh;



			hs1.atv = hs2.atv = hsv;



			hs1.alpha = hs2.alpha = a;



		}



	]]></action>





	

	                   















</krpano>